require "test_helper"

class PasswordsControllerTest < ActionDispatch::IntegrationTest

  setup do
    @user = User.take
  end

  test "new" do
    get new_password_path
    
    assert_response :success
  end

  test "create" do
    post passwords_path, params: { email_address: @user.email_address }

    assert_enqueued_email_with PasswordsMailer, :reset, args: [ @user ]
    assert_redirected_to new_session_url
    follow_redirect!
    assert_select "div", /reset instructions sent/
  end

  test "create for an unknown user redirects but sends no mail" do
    post passwords_path, params: { email_address: "missing-user@example.com" }

    assert_enqueued_emails 0
    assert_redirected_to new_session_url
    follow_redirect!
    assert_select "div", /reset instructions sent/
  end

  test "edit" do
    get edit_password_path(@user.password_reset_token)

    assert_response :success
  end

  test "edit with invalid password reset token" do
    get edit_password_path("invalid token")

    assert_redirected_to new_password_url
    follow_redirect!
    assert_select "div", /reset link is invalid/
  end

  test "update" do
    assert_changes -> { @user.reload.password_digest } do
      put password_path(@user.password_reset_token), params: {
        password: "new-password", password_confirmation: "new-password"
      }
    end

    assert_redirected_to new_session_url
    follow_redirect!
    assert_select "div", /Password has been reset/
  end

  test "update with non matching passwords" do
    token = @user.password_reset_token
    assert_no_changes -> { @user.reload.password_digest } do
      put password_path(token), params: {
        password: "A-password", password_confirmation: "B-password"
      }
    end

    assert_redirected_to edit_password_url(token)
    follow_redirect!
    assert_select "div", /Passwords did not match/
  end
end
